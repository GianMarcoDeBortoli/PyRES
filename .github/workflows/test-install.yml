name: Test PyRES Installation

on:
  push:
  pull_request:

jobs:
  test-install:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        method: [conda, pip]
        python-version: ['3.10']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Miniconda
        if: matrix.method == 'conda'
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - name: Create and activate environment (conda)
        if: matrix.method == 'conda'
        shell: bash -l {0}
        run: |
          conda env create -f environment.yml
          conda activate pyres-env
          python --version
          python -m pip install --upgrade pip

      - name: Create and activate environment (MacOS/Linux - pip)
        if: (matrix.method == 'pip' && runner.os != 'windows-latest')
        run: |
          python -m venv pyres-env
          source pyres-env/bin/activate
          python --version
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create and activate environment (Windows - pip)
        if: (matrix.method == 'pip' && runner.os == 'windows-latest')
        run: |
          python -m venv pyres-env
          .\pyres-env\Scripts\activate
          python --version
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run test example
        shell: bash -l {0}
        run: |
          if ('${{ runner.os }}' == 'Windows'); then
            .\pyres-env\Scripts\activate
          else
            source pyres-env/bin/activate
          fi
          python examples/E1_virtual-room.py